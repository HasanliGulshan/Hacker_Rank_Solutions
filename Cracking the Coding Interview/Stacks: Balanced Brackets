import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    private static final Map<Character, Character> bracket = new HashMap<>();

    static {
        bracket.put('(', ')');
        bracket.put('[', ']');
        bracket.put('{', '}');
    }

    private static void balanced(String expression) {
        Deque<Character> balanced = new ArrayDeque<>();

        if (expression.length() % 2 != 0) {
            System.out.println("No");
        } else {
            for (char s : expression.toCharArray()) {
                if (bracket.containsKey(s)) {
                    balanced.push(s);
                } else {//
                    if (balanced.isEmpty() || (s != bracket.get(balanced.pop()))) {

                        System.out.println("NO");
                        return;

                    }
                }

            }

            System.out.println(balanced.isEmpty() ? "YES" : "NO");
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String expression = scanner.nextLine();
            balanced(expression);
        }

        scanner.close();
    }
}
